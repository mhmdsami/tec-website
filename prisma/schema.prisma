// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma-app/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid()) @map("_id")
  email        String   @unique
  name         String
  type         UserType @default(USER)
  passwordHash String
  createdAt    DateTime @default(now())

  BusinessEnquiry BusinessEnquiry[]
  Enquiry         Enquiry[]

  isAdmin Boolean @default(false)

  Business Business?
}

enum UserType {
  USER
  BUSINESS
  ADMIN
}

model Business {
  id         String   @id @default(uuid()) @map("_id")
  name       String
  tagline    String
  about      String
  logo       String?
  coverImage String?
  location   String?
  instagram  String?
  whatsApp   String?
  facebook   String?
  linkedIn   String?
  email      String
  phone      String
  createdAt  DateTime @default(now())

  isVerified Boolean @default(false)

  type   BusinessType @relation(fields: [typeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  typeId String

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String @unique

  businessEnquiry BusinessEnquiry[]
  service         Service[]
}

model BusinessCategory {
  id    String         @id @default(uuid()) @map("_id")
  name  String
  slug  String         @unique
  types BusinessType[]

  EventRegistration EventRegistration[]
}

model BusinessType {
  id   String @id @default(uuid()) @map("_id")
  name String
  slug String @unique

  BusinessCategory   BusinessCategory @relation(fields: [businessCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  businessCategoryId String

  business Business[]
  enquiry  Enquiry[]
}

model Enquiry {
  id         String   @id @default(uuid()) @map("_id")
  name       String
  email      String
  phone      String
  message    String
  isResolved Boolean  @default(false)
  createdAt  DateTime @default(now())

  businessType   BusinessType @relation(fields: [businessTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  businessTypeId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model BusinessEnquiry {
  id         String   @id @default(uuid()) @map("_id")
  name       String
  email      String
  phone      String
  message    String
  isResolved Boolean  @default(false)
  createdAt  DateTime @default(now())

  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  businessId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

type Image {
  url         String
  description String?
}

model Event {
  id          String   @id @default(uuid()) @map("_id")
  slug        String   @unique
  title       String
  description String
  date        DateTime
  createdAt   DateTime @default(now())
  images      Image[]
  isCompleted Boolean  @default(false)

  registrations EventRegistration[]
}

model EventRegistration {
  id           String   @id @default(uuid()) @map("_id")
  name         String
  email        String
  phone        String
  businessName String
  location     String
  isMember     Boolean  @default(false)
  createdAt    DateTime @default(now())

  category   BusinessCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String

  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId String
}

model Blog {
  id          String   @id @default(uuid()) @map("_id")
  title       String
  description String
  content     String
  image       String
  createdAt   DateTime @default(now())
}

model Service {
  id          String   @id @default(uuid()) @map("_id")
  title       String
  description String
  image       String?
  createdAt   DateTime @default(now())

  business   Business @relation(fields: [businessId], references: [id])
  businessId String
}
